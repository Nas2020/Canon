/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Utility {
  export type CRED_DEFStruct = {
    cred_def_owner: AddressLike;
    trust_registry: AddressLike;
    revocation_registry: AddressLike;
    signature: BigNumberish;
    cred_def_id: BytesLike;
    schema_id: BytesLike;
    tag: string;
  };

  export type CRED_DEFStructOutput = [
    cred_def_owner: string,
    trust_registry: string,
    revocation_registry: string,
    signature: bigint,
    cred_def_id: string,
    schema_id: string,
    tag: string
  ] & {
    cred_def_owner: string;
    trust_registry: string;
    revocation_registry: string;
    signature: bigint;
    cred_def_id: string;
    schema_id: string;
    tag: string;
  };

  export type NYMStruct = {
    role: BigNumberish;
    version: BigNumberish;
    endpoint: string;
  };

  export type NYMStructOutput = [
    role: bigint,
    version: bigint,
    endpoint: string
  ] & { role: bigint; version: bigint; endpoint: string };

  export type SCHEMAStruct = {
    schema_owner: AddressLike;
    trust_registry: AddressLike;
    version: BigNumberish;
    schema_id: BytesLike;
    name: string;
    attributes: string[];
  };

  export type SCHEMAStructOutput = [
    schema_owner: string,
    trust_registry: string,
    version: bigint,
    schema_id: string,
    name: string,
    attributes: string[]
  ] & {
    schema_owner: string;
    trust_registry: string;
    version: bigint;
    schema_id: string;
    name: string;
    attributes: string[];
  };
}

export interface UtilityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CRED_DEFs"
      | "NYMs"
      | "SCHEMAs"
      | "getCredDef"
      | "getNYM"
      | "getSCHEMA"
      | "owner"
      | "registerCredDef"
      | "registerNYM"
      | "registerSchema"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredDefRegistered"
      | "NYMRegistered"
      | "SchemaRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CRED_DEFs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "NYMs", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "SCHEMAs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCredDef",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNYM", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getSCHEMA",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerCredDef",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNYM",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSchema",
    values: [AddressLike, AddressLike, BigNumberish, string, string[]]
  ): string;

  decodeFunctionResult(functionFragment: "CRED_DEFs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NYMs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SCHEMAs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCredDef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNYM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSCHEMA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCredDef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNYM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSchema",
    data: BytesLike
  ): Result;
}

export namespace CredDefRegisteredEvent {
  export type InputTuple = [credDefID: BytesLike, tag: string];
  export type OutputTuple = [credDefID: string, tag: string];
  export interface OutputObject {
    credDefID: string;
    tag: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NYMRegisteredEvent {
  export type InputTuple = [
    account: AddressLike,
    role: BigNumberish,
    version: BigNumberish,
    endpoint: string
  ];
  export type OutputTuple = [
    account: string,
    role: bigint,
    version: bigint,
    endpoint: string
  ];
  export interface OutputObject {
    account: string;
    role: bigint;
    version: bigint;
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SchemaRegisteredEvent {
  export type InputTuple = [schemaID: BytesLike, name: string];
  export type OutputTuple = [schemaID: string, name: string];
  export interface OutputObject {
    schemaID: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Utility extends BaseContract {
  connect(runner?: ContractRunner | null): Utility;
  waitForDeployment(): Promise<this>;

  interface: UtilityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CRED_DEFs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, string, string] & {
        cred_def_owner: string;
        trust_registry: string;
        revocation_registry: string;
        signature: bigint;
        cred_def_id: string;
        schema_id: string;
        tag: string;
      }
    ],
    "view"
  >;

  NYMs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        role: bigint;
        version: bigint;
        endpoint: string;
      }
    ],
    "view"
  >;

  SCHEMAs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, string] & {
        schema_owner: string;
        trust_registry: string;
        version: bigint;
        schema_id: string;
        name: string;
      }
    ],
    "view"
  >;

  getCredDef: TypedContractMethod<
    [_cred_def_id: BytesLike],
    [Utility.CRED_DEFStructOutput],
    "view"
  >;

  getNYM: TypedContractMethod<
    [_dest: AddressLike],
    [Utility.NYMStructOutput],
    "view"
  >;

  getSCHEMA: TypedContractMethod<
    [_schema_id: BytesLike],
    [Utility.SCHEMAStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerCredDef: TypedContractMethod<
    [
      _cred_def_owner: AddressLike,
      _trust_registry: AddressLike,
      _revocation_registry: AddressLike,
      _signature: BigNumberish,
      _schema_id: BytesLike,
      _tag: string
    ],
    [string],
    "nonpayable"
  >;

  registerNYM: TypedContractMethod<
    [
      _dest: AddressLike,
      _role: BigNumberish,
      _version: BigNumberish,
      _endpoint: string
    ],
    [void],
    "nonpayable"
  >;

  registerSchema: TypedContractMethod<
    [
      _schema_owner: AddressLike,
      _trust_registry: AddressLike,
      _version: BigNumberish,
      _name: string,
      _attributes: string[]
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CRED_DEFs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, string, string] & {
        cred_def_owner: string;
        trust_registry: string;
        revocation_registry: string;
        signature: bigint;
        cred_def_id: string;
        schema_id: string;
        tag: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "NYMs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        role: bigint;
        version: bigint;
        endpoint: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "SCHEMAs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, string] & {
        schema_owner: string;
        trust_registry: string;
        version: bigint;
        schema_id: string;
        name: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCredDef"
  ): TypedContractMethod<
    [_cred_def_id: BytesLike],
    [Utility.CRED_DEFStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNYM"
  ): TypedContractMethod<
    [_dest: AddressLike],
    [Utility.NYMStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSCHEMA"
  ): TypedContractMethod<
    [_schema_id: BytesLike],
    [Utility.SCHEMAStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerCredDef"
  ): TypedContractMethod<
    [
      _cred_def_owner: AddressLike,
      _trust_registry: AddressLike,
      _revocation_registry: AddressLike,
      _signature: BigNumberish,
      _schema_id: BytesLike,
      _tag: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerNYM"
  ): TypedContractMethod<
    [
      _dest: AddressLike,
      _role: BigNumberish,
      _version: BigNumberish,
      _endpoint: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSchema"
  ): TypedContractMethod<
    [
      _schema_owner: AddressLike,
      _trust_registry: AddressLike,
      _version: BigNumberish,
      _name: string,
      _attributes: string[]
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "CredDefRegistered"
  ): TypedContractEvent<
    CredDefRegisteredEvent.InputTuple,
    CredDefRegisteredEvent.OutputTuple,
    CredDefRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NYMRegistered"
  ): TypedContractEvent<
    NYMRegisteredEvent.InputTuple,
    NYMRegisteredEvent.OutputTuple,
    NYMRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SchemaRegistered"
  ): TypedContractEvent<
    SchemaRegisteredEvent.InputTuple,
    SchemaRegisteredEvent.OutputTuple,
    SchemaRegisteredEvent.OutputObject
  >;

  filters: {
    "CredDefRegistered(bytes20,string)": TypedContractEvent<
      CredDefRegisteredEvent.InputTuple,
      CredDefRegisteredEvent.OutputTuple,
      CredDefRegisteredEvent.OutputObject
    >;
    CredDefRegistered: TypedContractEvent<
      CredDefRegisteredEvent.InputTuple,
      CredDefRegisteredEvent.OutputTuple,
      CredDefRegisteredEvent.OutputObject
    >;

    "NYMRegistered(address,uint8,uint8,string)": TypedContractEvent<
      NYMRegisteredEvent.InputTuple,
      NYMRegisteredEvent.OutputTuple,
      NYMRegisteredEvent.OutputObject
    >;
    NYMRegistered: TypedContractEvent<
      NYMRegisteredEvent.InputTuple,
      NYMRegisteredEvent.OutputTuple,
      NYMRegisteredEvent.OutputObject
    >;

    "SchemaRegistered(bytes20,string)": TypedContractEvent<
      SchemaRegisteredEvent.InputTuple,
      SchemaRegisteredEvent.OutputTuple,
      SchemaRegisteredEvent.OutputObject
    >;
    SchemaRegistered: TypedContractEvent<
      SchemaRegisteredEvent.InputTuple,
      SchemaRegisteredEvent.OutputTuple,
      SchemaRegisteredEvent.OutputObject
    >;
  };
}
